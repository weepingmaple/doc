Here is the complete Confluence page converted to Markdown format:[1][2][3]

***

# ZScaler IP Ranges - Centralized Tracking and Synchronization

## Table of Contents
- [Executive Summary](#executive-summary)
- [Version Control and Change History](#version-control-and-change-history)
- [Source Configuration](#source-configuration)
- [Current IP Ranges Comparison Matrix](#current-ip-ranges-comparison-matrix)
- [Destination System Update Procedures](#destination-system-update-procedures)
  - [1. Azure Named Locations](#1-azure-named-locations-conditional-access)
  - [2. WAF CloudCell Terraform Module](#2-waf-cloudcell-terraform-module)
  - [3. WAF IPSets](#3-waf-ipsets-direct-configuration)
- [Automated Alerting and Notification Strategy](#automated-alerting-and-notification-strategy)
- [Documentation and API References](#documentation-and-api-references)
- [Health Checks and Validation](#health-checks-and-validation)
- [Troubleshooting and Common Issues](#troubleshooting-and-common-issues)
- [Contact Information and Ownership](#contact-information-and-ownership)

***

## Executive Summary

> **⚠️ CRITICAL INFRASTRUCTURE DEPENDENCY**
>
> **Purpose:** This page serves as the single source of truth for ZScaler Cloud Enforcement Node (CENR) IP ranges and tracks their synchronization across four critical security infrastructure components.[4][5]
>
> **Update Criticality:** Failure to maintain synchronized IP ranges can result in:
> - Blocked legitimate user traffic through ZScaler proxies
> - Conditional Access policy failures in Azure
> - WAF misconfigurations leading to service disruptions
> - Security gaps in perimeter protection
>
> **Update Frequency:** ZScaler IP ranges should be checked weekly and updated within 24 hours of any published changes.[5][6]

**Current Status:** 🟢 IN SYNC - Last synchronized: 2025-10-03

***

## Version Control and Change History

| Version | Update Date | Updated By | Change Description | Affected Systems | Ticket Reference |
|---------|-------------|------------|-------------------|------------------|------------------|
| 1.5 | 2025-10-01 | [Name] | Added new APAC datacenter ranges | Azure, WAF CloudCell, WAF IPSets | INFRA-12345 |
| 1.4 | 2025-09-15 | [Name] | Removed deprecated EU ranges | All systems | INFRA-12234 |
| 1.3 | 2025-09-01 | [Name] | Initial CENR sync | All systems | INFRA-12100 |

***

## Source Configuration

### ZScaler CENR Endpoint

**Primary Source:** https://config.zscaler.com/zscaler.net/cenr

**API Endpoint:**
```bash
https://config.zscaler.com/api/getdata/zscaler.net/all/cenr?site=config.zscaler.com
```

**Authentication:** No authentication required (public endpoint)[4]

**Data Format:** JSON response containing regional IP ranges, datacenter locations, and readiness status[4]

### Automated Retrieval Script

<details>
<summary>Click to view Python script for retrieving ZScaler IP ranges</summary>

```python
#!/usr/bin/env python3
import requests
import json
from datetime import datetime

def get_zscaler_ip_ranges():
    """
    Retrieves ZScaler CENR IP ranges from official API endpoint
    Filters out future/not-ready datacenters
    """
    response = requests.get(
        'https://config.zscaler.com/api/getdata/zscaler.net/all/cenr?site=config.zscaler.com'
    )
    
    if response.status_code != 200:
        raise Exception(f"Failed to retrieve data: {response.status_code}")
    
    data = response.json()
    regions = data['data'][6]['body']['json']['rows'][1:]
    
    ip_ranges = []
    
    for region in regions:
        region_name = region['region']
        cols = region['cols']
        
        for col in cols:
            data_entries = col['data']
            
            for entry in data_entries:
                if entry.get('multivip'):
                    sub_data = entry['data']
                    
                    for sub_entry in sub_data:
                        # Check if datacenter is ready for use
                        not_ready = any(note['id'] == 3 for note in sub_entry.get('notes', []))
                        
                        if not not_ready:
                            ip_ranges.append({
                                'ip_address': sub_entry['ip_address'],
                                'region': sub_entry['region'],
                                'location': sub_entry['location'],
                                'label': f"Zscaler-{sub_entry['region']}-{sub_entry['location']}"
                            })
    
    return ip_ranges

def export_to_cidr_format(ip_ranges):
    """Converts IP ranges to CIDR notation for Azure/WAF"""
    cidr_ranges = []
    for ip_range in ip_ranges:
        # Add /32 for individual IPs if not already in CIDR format
        ip_addr = ip_range['ip_address']
        if '/' not in ip_addr:
            ip_addr = f"{ip_addr}/32"
        cidr_ranges.append(ip_addr)
    return cidr_ranges

if __name__ == "__main__":
    ranges = get_zscaler_ip_ranges()
    cidr_list = export_to_cidr_format(ranges)
    
    output = {
        'timestamp': datetime.utcnow().isoformat(),
        'total_ranges': len(cidr_list),
        'ip_ranges': cidr_list
    }
    
    with open('zscaler_ranges.json', 'w') as f:
        json.dump(output, f, indent=2)
    
    print(f"Retrieved {len(cidr_list)} IP ranges")
    print(f"Output saved to zscaler_ranges.json")
```

</details>

***

## Current IP Ranges Comparison Matrix

### Synchronization Status Dashboard

| Destination System | Status | Last Updated | IP Count | Sync Health | Action Required |
|-------------------|--------|--------------|----------|-------------|-----------------|
| ZScaler CENR (Source) | 🔵 SOURCE | 2025-10-03 | 147 | N/A | Monitor weekly |
| Azure Named Locations | 🟢 SYNCED | 2025-10-03 | 147 | ✓ | None |
| WAF CloudCell Terraform | 🟡 PENDING | 2025-09-28 | 142 | ⚠️ | Update required |
| WAF IPSets | 🟢 SYNCED | 2025-10-03 | 147 | ✓ | None |

### Active IP Ranges (Sample)

> **ℹ️ Current Production IP Ranges**
>
> Total Active Ranges: 147  
> Last Retrieved: 2025-10-03 16:45 +08

| Region | Location | IP Address/Range | CIDR Notation | Status |
|--------|----------|------------------|---------------|--------|
| Americas | US-East | 165.225.0.0 | 165.225.0.0/16 | 🟢 ACTIVE |
| Americas | US-West | 147.161.128.0 | 147.161.128.0/17 | 🟢 ACTIVE |
| EMEA | EU-Central | 185.46.212.0 | 185.46.212.0/22 | 🟢 ACTIVE |
| APAC | Singapore | 136.226.0.0 | 136.226.0.0/16 | 🟢 ACTIVE |
| APAC | Sydney | 147.161.192.0 | 147.161.192.0/18 | 🟢 ACTIVE |

> **💡 Note:** The complete list of 147 IP ranges is maintained in the attached file: `zscaler_ranges_latest.json`

***

## Destination System Update Procedures

### 1. Azure Named Locations (Conditional Access)

> **Azure Named Locations Configuration**
>
> **Purpose:** Controls conditional access policies based on ZScaler egress IPs[7][8]
>
> **Resource Type:** Microsoft Graph API - ipNamedLocation
>
> **Maximum Limits:**
> - Maximum 195 named locations per tenant[9]
> - Maximum 2000 IP ranges per named location[9]

#### Prerequisites

- Microsoft Graph API permissions: `Policy.ReadWrite.ConditionalAccess`[7]
- Azure AD Global Administrator or Conditional Access Administrator role
- PowerShell Module: `Microsoft.Graph.Identity.SignIns`[8][10]

#### Update Procedure via Microsoft Graph API

```powershell
# Install required module
Install-Module Microsoft.Graph.Identity.SignIns -Scope CurrentUser

# Connect with appropriate permissions
Connect-MgGraph -Scopes "Policy.ReadWrite.ConditionalAccess"

# Retrieve existing Named Location ID
$namedLocations = Get-MgIdentityConditionalAccessNamedLocation -All
$zscalerLocation = $namedLocations | Where-Object { $_.DisplayName -eq "ZScaler-CENR-IPs" }

# Load IP ranges from file
$ipRanges = Get-Content -Path "zscaler_ranges.json" | ConvertFrom-Json

# Convert to required format
$ipRangeObjects = @()
foreach ($ip in $ipRanges.ip_ranges) {
    $ipRangeObjects += @{
        "@odata.type" = "#microsoft.graph.iPv4CidrRange"
        cidrAddress = $ip
    }
}

# Update Named Location
$updateParams = @{
    "@odata.type" = "#microsoft.graph.ipNamedLocation"
    displayName = "ZScaler-CENR-IPs"
    isTrusted = $true
    ipRanges = $ipRangeObjects
}

Update-MgIdentityConditionalAccessNamedLocation `
    -NamedLocationId $zscalerLocation.Id `
    -BodyParameter $updateParams

Write-Host "Successfully updated Azure Named Location with $($ipRanges.total_ranges) IP ranges"
```

#### Update Procedure via Azure CLI

```bash
# Login to Azure
az login

# Get Named Location ID
LOCATION_ID=$(az rest --method get \
  --url 'https://graph.microsoft.com/v1.0/identity/conditionalAccess/namedLocations' \
  --query "value[?displayName=='ZScaler-CENR-IPs'].id" -o tsv)

# Update Named Location (payload in JSON file)
az rest --method PATCH \
  --url "https://graph.microsoft.com/v1.0/identity/conditionalAccess/namedLocations/${LOCATION_ID}" \
  --headers 'Content-Type=application/json' \
  --body @azure_namedlocation_payload.json
```

#### Verification Steps

```powershell
# Verify update
$updatedLocation = Get-MgIdentityConditionalAccessNamedLocation -NamedLocationId $zscalerLocation.Id
Write-Host "IP Range Count: $($updatedLocation.IpRanges.Count)"
Write-Host "Is Trusted: $($updatedLocation.IsTrusted)"
```

#### Rollback Procedure

```powershell
# Load backup configuration
$backupConfig = Get-Content -Path "backup/azure_namedlocation_backup_$(Get-Date -Format 'yyyyMMdd').json" | ConvertFrom-Json

# Restore previous configuration
Update-MgIdentityConditionalAccessNamedLocation `
    -NamedLocationId $zscalerLocation.Id `
    -BodyParameter $backupConfig

Write-Host "Rollback completed successfully"
```

***

### 2. WAF CloudCell Terraform Module

> **WAF CloudCell Terraform Configuration**
>
> **Purpose:** Infrastructure as Code for WAF IP allowlists[11][12]
>
> **Repository:** `git@github.com:organization/waf-cloudcell-terraform.git`
>
> **Module Path:** `modules/waf-cloudcell/variables.tf`

#### Terraform Variable Structure

```hcl
variable "zscaler_ip_ranges" {
  description = "ZScaler CENR IP ranges for WAF allowlist"
  type        = list(string)
  default     = [
    "165.225.0.0/16",
    "147.161.128.0/17",
    "185.46.212.0/22",
    "136.226.0.0/16",
    # Additional ranges...
  ]
  
  validation {
    condition     = alltrue([for ip in var.zscaler_ip_ranges : can(cidrhost(ip, 0))])
    error_message = "All IP ranges must be valid CIDR notation."
  }
}

variable "zscaler_ranges_last_updated" {
  description = "Last update timestamp for ZScaler IP ranges"
  type        = string
  default     = "2025-10-03T08:45:00Z"
}
```

#### Terraform Resource Configuration

```hcl
locals {
  zscaler_ip_map = { for idx, ip in var.zscaler_ip_ranges : 
    "zscaler_range_${idx}" => ip 
  }
}

resource "aws_wafv2_ip_set" "zscaler_cenr" {
  name               = "zscaler-cenr-ipset"
  description        = "ZScaler Cloud Enforcement Node Ranges - Updated: ${var.zscaler_ranges_last_updated}"
  scope              = "REGIONAL"
  ip_address_version = "IPV4"
  
  addresses = var.zscaler_ip_ranges
  
  tags = {
    Name             = "ZScaler-CENR-IPSet"
    Environment      = var.environment
    ManagedBy        = "Terraform"
    LastUpdated      = var.zscaler_ranges_last_updated
    SourceEndpoint   = "https://config.zscaler.com/zscaler.net/cenr"
  }
}

# WAF Rule to allow ZScaler IPs
resource "aws_wafv2_web_acl" "cloudcell_waf" {
  name  = "cloudcell-waf-acl"
  scope = "REGIONAL"
  
  default_action {
    block {}
  }
  
  rule {
    name     = "AllowZScalerCENR"
    priority = 1
    
    action {
      allow {}
    }
    
    statement {
      ip_set_reference_statement {
        arn = aws_wafv2_ip_set.zscaler_cenr.arn
      }
    }
    
    visibility_config {
      cloudwatch_metrics_enabled = true
      metric_name                = "AllowZScalerCENR"
      sampled_requests_enabled   = true
    }
  }
  
  visibility_config {
    cloudwatch_metrics_enabled = true
    metric_name                = "CloudCellWAF"
    sampled_requests_enabled   = true
  }
}
```

#### Update Procedure

```bash
#!/bin/bash

# 1. Clone repository
git clone git@github.com:organization/waf-cloudcell-terraform.git
cd waf-cloudcell-terraform

# 2. Create feature branch
git checkout -b update/zscaler-ip-ranges-$(date +%Y%m%d)

# 3. Update variables file
cat zscaler_ranges.json | jq -r '.ip_ranges[]' | \
  awk 'BEGIN{print "variable \"zscaler_ip_ranges\" {"} 
       BEGIN{print "  type = list(string)"} 
       BEGIN{print "  default = ["} 
       {print "    \""$0"\","}
       END{print "  ]"}
       END{print "}"}' > modules/waf-cloudcell/variables.tf.new

mv modules/waf-cloudcell/variables.tf.new modules/waf-cloudcell/variables.tf

# 4. Update timestamp variable
CURRENT_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
sed -i "s/default = \".*\"/default = \"$CURRENT_TIME\"/" \
  modules/waf-cloudcell/variables.tf

# 5. Terraform validation
cd environments/production
terraform init
terraform validate
terraform plan -out=tfplan

# 6. Review and apply
terraform show tfplan
# After review:
# terraform apply tfplan

# 7. Commit and push
git add modules/waf-cloudcell/variables.tf
git commit -m "Update ZScaler CENR IP ranges - $(date +%Y-%m-%d)"
git push origin update/zscaler-ip-ranges-$(date +%Y%m%d)

# 8. Create pull request
echo "Create PR at: https://github.com/organization/waf-cloudcell-terraform/compare/update/zscaler-ip-ranges-$(date +%Y%m%d)"
```

#### Rollback Procedure

```bash
# Identify previous state version
terraform state list

# Rollback to specific version
terraform state pull > backup.tfstate
terraform apply -auto-approve -backup=backup.tfstate

# Alternative: Revert Git commit
git revert HEAD
git push origin main

# Re-apply previous configuration
terraform init
terraform apply -auto-approve
```

***

### 3. WAF IPSets (Direct Configuration)

> **AWS WAF IPSet Direct Configuration**
>
> **Purpose:** Direct WAF IPSet management for non-Terraform environments[13][11]
>
> **AWS Service:** AWS WAFv2
>
> **Resource ARN Format:** `arn:aws:wafv2:region:account-id:regional/ipset/name/id`

#### AWS CLI Update Procedure

```bash
#!/bin/bash

# Configuration
IPSET_NAME="zscaler-cenr-ipset"
IPSET_ID="a1b2c3d4-5678-90ab-cdef-EXAMPLE11111"
AWS_REGION="us-east-1"
SCOPE="REGIONAL"

# Get current lock token (required for updates)
LOCK_TOKEN=$(aws wafv2 get-ip-set \
  --scope $SCOPE \
  --id $IPSET_ID \
  --name $IPSET_NAME \
  --region $AWS_REGION \
  --query 'LockToken' \
  --output text)

# Load IP ranges from file
IP_RANGES=$(cat zscaler_ranges.json | jq -r '.ip_ranges | join(" ")')

# Update IPSet
aws wafv2 update-ip-set \
  --scope $SCOPE \
  --id $IPSET_ID \
  --name $IPSET_NAME \
  --addresses $IP_RANGES \
  --lock-token $LOCK_TOKEN \
  --region $AWS_REGION

# Verify update
echo "Verification:"
aws wafv2 get-ip-set \
  --scope $SCOPE \
  --id $IPSET_ID \
  --name $IPSET_NAME \
  --region $AWS_REGION \
  --query '{Name:Name,IPCount:Addresses|length(@),LastUpdated:UpdatedTime}'
```

#### Terraform Alternative (Standalone)

```hcl
# Provider configuration
provider "aws" {
  region = "us-east-1"
}

# Read IP ranges from local file
locals {
  zscaler_ranges = jsondecode(file("${path.module}/zscaler_ranges.json"))
}

# Create IPSet
resource "aws_wafv2_ip_set" "zscaler_standalone" {
  name               = "zscaler-cenr-ipset-standalone"
  description        = "ZScaler CENR IP Ranges - Standalone Configuration"
  scope              = "REGIONAL"
  ip_address_version = "IPV4"
  
  addresses = local.zscaler_ranges.ip_ranges
  
  tags = {
    Name        = "ZScaler-CENR-Standalone"
    Environment = "Production"
    LastSync    = local.zscaler_ranges.timestamp
  }
}

# Output IPSet details
output "ipset_arn" {
  value = aws_wafv2_ip_set.zscaler_standalone.arn
}

output "ipset_id" {
  value = aws_wafv2_ip_set.zscaler_standalone.id
}
```

#### Python Boto3 Update Script

```python
import boto3
import json
from datetime import datetime

def update_waf_ipset(ipset_name, ipset_id, ip_ranges, region='us-east-1'):
    """
    Updates AWS WAFv2 IPSet with new ZScaler IP ranges
    """
    client = boto3.client('wafv2', region_name=region)
    
    # Get current IPSet to retrieve lock token
    response = client.get_ip_set(
        Scope='REGIONAL',
        Name=ipset_name,
        Id=ipset_id
    )
    
    lock_token = response['LockToken']
    
    # Update IPSet
    update_response = client.update_ip_set(
        Scope='REGIONAL',
        Name=ipset_name,
        Id=ipset_id,
        Addresses=ip_ranges,
        LockToken=lock_token
    )
    
    print(f"IPSet updated successfully at {datetime.utcnow().isoformat()}")
    print(f"NextLockToken: {update_response['NextLockToken']}")
    
    return update_response

if __name__ == "__main__":
    # Load IP ranges
    with open('zscaler_ranges.json', 'r') as f:
        data = json.load(f)
    
    # Configuration
    IPSET_NAME = 'zscaler-cenr-ipset'
    IPSET_ID = 'a1b2c3d4-5678-90ab-cdef-EXAMPLE11111'
    
    # Update
    result = update_waf_ipset(
        ipset_name=IPSET_NAME,
        ipset_id=IPSET_ID,
        ip_ranges=data['ip_ranges'],
        region='us-east-1'
    )
```

#### Verification and Validation

```bash
# Verify IPSet configuration
aws wafv2 get-ip-set \
  --scope REGIONAL \
  --id $IPSET_ID \
  --name $IPSET_NAME \
  --region us-east-1

# List all IPSets
aws wafv2 list-ip-sets \
  --scope REGIONAL \
  --region us-east-1

# Check CloudWatch metrics for WAF activity
aws cloudwatch get-metric-statistics \
  --namespace AWS/WAFV2 \
  --metric-name AllowedRequests \
  --dimensions Name=Rule,Value=AllowZScalerCENR \
  --start-time $(date -u -d '1 hour ago' +%Y-%m-%dT%H:%M:%S) \
  --end-time $(date -u +%Y-%m-%dT%H:%M:%S) \
  --period 300 \
  --statistics Sum \
  --region us-east-1
```

***

## Automated Alerting and Notification Strategy

> **Monitoring and Alerting Framework**
>
> **Objective:** Detect ZScaler IP range changes and trigger automated notifications[8][4]

### Detection Methods

#### 1. Scheduled Webhook Monitoring

```python
import requests
import hashlib
import json
from datetime import datetime

def monitor_zscaler_changes(webhook_url):
    """
    Monitors ZScaler CENR endpoint for changes
    Sends Slack/Teams notification on detected changes
    """
    current_data = requests.get(
        'https://config.zscaler.com/api/getdata/zscaler.net/all/cenr?site=config.zscaler.com'
    ).json()
    
    # Generate hash of current data
    current_hash = hashlib.sha256(
        json.dumps(current_data, sort_keys=True).encode()
    ).hexdigest()
    
    # Compare with stored hash
    try:
        with open('zscaler_hash.txt', 'r') as f:
            stored_hash = f.read().strip()
    except FileNotFoundError:
        stored_hash = None
    
    if stored_hash != current_hash:
        # Change detected - send notification
        message = {
            "text": f"⚠️ ZScaler IP Range Change Detected",
            "attachments": [{
                "color": "warning",
                "fields": [
                    {"title": "Detection Time", "value": datetime.utcnow().isoformat(), "short": True},
                    {"title": "Action Required", "value": "Update all destination systems", "short": True}
                ],
                "footer": "ZScaler CENR Monitor"
            }]
        }
        
        requests.post(webhook_url, json=message)
        
        # Update stored hash
        with open('zscaler_hash.txt', 'w') as f:
            f.write(current_hash)
        
        return True
    
    return False
```

#### 2. AWS EventBridge Scheduled Rule

```hcl
resource "aws_cloudwatch_event_rule" "zscaler_check" {
  name                = "zscaler-ip-range-check"
  description         = "Checks ZScaler IP ranges daily"
  schedule_expression = "cron(0 8 * * ? *)"  # Daily at 8 AM UTC
}

resource "aws_cloudwatch_event_target" "lambda" {
  rule      = aws_cloudwatch_event_rule.zscaler_check.name
  target_id = "ZScalerMonitorLambda"
  arn       = aws_lambda_function.zscaler_monitor.arn
}

resource "aws_sns_topic" "zscaler_alerts" {
  name = "zscaler-ip-range-changes"
}

resource "aws_sns_topic_subscription" "email" {
  topic_arn = aws_sns_topic.zscaler_alerts.arn
  protocol  = "email"
  endpoint  = "network-team@company.com"
}
```

### Notification Channels

| Channel | Purpose | Configuration | Audience |
|---------|---------|---------------|----------|
| Slack | Immediate notifications | Webhook: `https://hooks.slack.com/services/...` | Network & Security Teams |
| Microsoft Teams | Change alerts | Webhook: `https://company.webhook.office.com/...` | Infrastructure Team |
| Email | Daily digest | SNS Topic: `arn:aws:sns:us-east-1:123456789012:zscaler-alerts` | Management |
| PagerDuty | Critical failures | Integration Key: `<INTEGRATION_KEY>` | On-call engineers |
| JIRA | Automatic ticket creation | Project: `INFRA`, Issue Type: `Task` | All stakeholders |

### Escalation Matrix

```
Level 1 (0-2 hours):   Network Operations Team
Level 2 (2-4 hours):   Network Architecture Team
Level 3 (4-8 hours):   Infrastructure Management
Level 4 (8+ hours):    Director of Infrastructure
```

***

## Documentation and API References

### Official Documentation Links

- [ZScaler CENR Configuration](https://config.zscaler.com/zscaler.net/cenr)[6][5]
- [Microsoft Graph - Named Locations API](https://learn.microsoft.com/en-us/graph/api/ipnamedlocation-update)[7]
- [AWS WAFv2 IPSet Resource](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/wafv2_ip_set)[11][13]
- [Azure Conditional Access Named Locations](https://learn.microsoft.com/en-us/azure/active-directory/conditional-access/location-condition)[9]
- [Terraform AWS WAF Provider Documentation](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)[11]

### Internal Documentation

- WAF CloudCell Architecture Overview
- Azure Conditional Access Policy Standards
- Network Security Baseline Configuration
- Incident Response Runbook - WAF

### API Endpoints Summary

| Service | Endpoint | Method | Authentication |
|---------|----------|--------|----------------|
| ZScaler CENR | `https://config.zscaler.com/api/getdata/zscaler.net/all/cenr` | GET | None (Public)[4] |
| Microsoft Graph | `https://graph.microsoft.com/v1.0/identity/conditionalAccess/namedLocations` | GET/PATCH | OAuth 2.0[7] |
| AWS WAFv2 | `wafv2.{region}.amazonaws.com` | API | AWS SigV4[11] |

***

## Health Checks and Validation

### Post-Update Validation Checklist

- [ ] **Azure Named Locations**
  - [ ] IP count matches source
  - [ ] Location marked as "Trusted"
  - [ ] Conditional Access policies functioning
  - [ ] No authentication failures reported

- [ ] **WAF CloudCell Terraform**
  - [ ] Terraform plan shows expected changes
  - [ ] Module validation passed
  - [ ] No resource drift detected
  - [ ] CloudWatch metrics show normal traffic

- [ ] **WAF IPSets**
  - [ ] IPSet updated successfully
  - [ ] Lock token retrieved
  - [ ] CloudWatch logs show allowed requests
  - [ ] No legitimate traffic blocked

- [ ] **Documentation**
  - [ ] Confluence page updated
  - [ ] Change log entry added
  - [ ] Version incremented
  - [ ] Team notified

### Automated Health Check Script

```bash
#!/bin/bash

echo "=== ZScaler IP Range Synchronization Health Check ==="
echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
echo ""

# 1. Check ZScaler source
echo "[1/4] Checking ZScaler CENR endpoint..."
CENR_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
  'https://config.zscaler.com/api/getdata/zscaler.net/all/cenr?site=config.zscaler.com')

if [ "$CENR_STATUS" -eq 200 ]; then
  echo "✓ ZScaler CENR: OK"
else
  echo "✗ ZScaler CENR: FAILED (HTTP $CENR_STATUS)"
fi

# 2. Check Azure Named Locations
echo "[2/4] Checking Azure Named Locations..."
AZURE_COUNT=$(az rest --method get \
  --url 'https://graph.microsoft.com/v1.0/identity/conditionalAccess/namedLocations' \
  --query "value[?displayName=='ZScaler-CENR-IPs'].ipRanges | [0] | length(@)" -o tsv)

echo "✓ Azure Named Location IP Count: $AZURE_COUNT"

# 3. Check WAF IPSet
echo "[3/4] Checking AWS WAF IPSet..."
WAF_COUNT=$(aws wafv2 get-ip-set \
  --scope REGIONAL \
  --id $IPSET_ID \
  --name $IPSET_NAME \
  --region us-east-1 \
  --query 'IPSet.Addresses | length(@)' \
  --output text)

echo "✓ WAF IPSet IP Count: $WAF_COUNT"

# 4. Compare counts
echo "[4/4] Synchronization status..."
if [ "$AZURE_COUNT" -eq "$WAF_COUNT" ]; then
  echo "✓ All systems synchronized ($AZURE_COUNT ranges)"
else
  echo "⚠ SYNC MISMATCH - Azure: $AZURE_COUNT, WAF: $WAF_COUNT"
fi

echo ""
echo "=== Health Check Complete ==="
```

***

## Troubleshooting and Common Issues

<details>
<summary>Click to view troubleshooting guide</summary>

### Issue 1: Azure Named Location Update Fails

**Symptoms:** PowerShell command returns 403 Forbidden or 401 Unauthorized[7]

**Resolution:**
```powershell
# Verify permissions
Get-MgContext | Select-Object -ExpandProperty Scopes

# Should include: Policy.ReadWrite.ConditionalAccess
# If missing, reconnect with correct scope:
Connect-MgGraph -Scopes "Policy.ReadWrite.ConditionalAccess"
```

### Issue 2: WAF IPSet Exceeds Capacity Limits

**Symptoms:** AWS API returns LimitExceededException[13][11]

**Limits:**
- Maximum 10,000 IP addresses per IPSet
- IPv4 CIDR ranges count as: (2^(32-prefix)) addresses

**Resolution:**
- Consolidate IP ranges using CIDR aggregation
- Split into multiple IPSets if necessary
- Use WAFv2 IP Set Groups for logical grouping

### Issue 3: Terraform State Lock

**Symptoms:** "Error locking state" during terraform apply

**Resolution:**
```bash
# Force unlock (use with caution)
terraform force-unlock <LOCK_ID>

# Or use DynamoDB lock table
aws dynamodb delete-item \
  --table-name terraform-state-lock \
  --key '{"LockID": {"S": "terraform-state-lock-id"}}'
```

### Issue 4: ZScaler API Returns Stale Data

**Symptoms:** Retrieved IP ranges don't match published documentation[4]

**Resolution:**
- Clear DNS cache
- Add cache-busting parameter to API call
- Verify using alternate endpoint: `https://config.zscalerthree.net/cenr`[14]

</details>

***

## Contact Information and Ownership

| Role | Name | Email | Slack Handle | Responsibility |
|------|------|-------|--------------|----------------|
| Page Owner | [Network Architect Name] | network.architect@company.com | @netarch | Overall coordination |
| Azure Administrator | [Azure Admin Name] | azure.admin@company.com | @azureadmin | Azure Named Locations |
| Terraform Maintainer | [DevOps Name] | devops@company.com | @devops | WAF Terraform modules |
| Security Engineer | [Security Name] | security@company.com | @seceng | WAF IPSets & policies |
| Backup Contact | [Manager Name] | manager@company.com | @manager | Escalation point |

### Support Channels

- **Slack:** `#network-security`
- **Email DL:** `network-operations@company.com`
- **JIRA Project:** [INFRA](https://jira.company.com/projects/INFRA)
- **Confluence Space:** [Network Infrastructure](https://confluence.company.com/display/NETINFRA)

***

## Attachments and Resources

- `zscaler_ranges_latest.json` - Current IP ranges (JSON format)
- `zscaler_ranges_latest.csv` - Current IP ranges (CSV format)
- `azure_namedlocation_backup_20251003.json` - Azure backup
- `terraform_ipset_config_20251003.tf` - Terraform config backup
- `update_procedures_flowchart.pdf` - Visual workflow diagram

***

## Page Maintenance Information

> **ℹ️ Page Maintenance**
>
> **Last Updated:** 2025-10-03 16:45 +08  
> **Next Review Date:** 2025-10-10  
> **Document Version:** 1.5  
> **Change Frequency:** Weekly monitoring, updates as needed

> **⚠️ CRITICAL REMINDER:** Always create backups before making changes to production systems. Test updates in non-production environments first when possible.

***

### Quick Action Links

- [Check ZScaler CENR Now](https://config.zscaler.com/zscaler.net/cenr)
- [Azure Conditional Access Portal](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ConditionalAccessBlade/NamedLocations)
- [AWS WAF Console](https://console.aws.amazon.com/wafv2/)
- [Terraform Cloud Workspace](https://app.terraform.io/app/organization/workspaces/waf-cloudcell)
- [Create JIRA Ticket](https://jira.company.com/secure/CreateIssue.jspa?pid=12345&issuetype=10001)

***

---
Here is the complete Confluence page converted to Markdown format:

***

# ZScaler IP Ranges - Centralized Tracking and Synchronization

## Table of Contents
- [Executive Summary](#executive-summary)
- [Version Control and Change History](#version-control-and-change-history)
- [Source Configuration](#source-configuration)
- [Current IP Ranges Comparison Matrix](#current-ip-ranges-comparison-matrix)
- [Destination System Update Procedures](#destination-system-update-procedures)
  - [1. Azure Named Locations](#1-azure-named-locations-conditional-access)
  - [2. WAF CloudCell Terraform Module](#2-waf-cloudcell-terraform-module)
  - [3. WAF IPSets](#3-waf-ipsets-direct-configuration)
- [Automated Alerting and Notification Strategy](#automated-alerting-and-notification-strategy)
- [Documentation and API References](#documentation-and-api-references)
- [Health Checks and Validation](#health-checks-and-validation)
- [Troubleshooting and Common Issues](#troubleshooting-and-common-issues)
- [Contact Information and Ownership](#contact-information-and-ownership)

***

## Executive Summary

> **⚠️ CRITICAL INFRASTRUCTURE DEPENDENCY**
>
> **Purpose:** This page serves as the single source of truth for ZScaler Cloud Enforcement Node (CENR) IP ranges and tracks their synchronization across four critical security infrastructure components.
>
> **Update Criticality:** Failure to maintain synchronized IP ranges can result in:
> - Blocked legitimate user traffic through ZScaler proxies
> - Conditional Access policy failures in Azure
> - WAF misconfigurations leading to service disruptions
> - Security gaps in perimeter protection
>
> **Update Frequency:** ZScaler IP ranges should be checked weekly and updated within 24 hours of any published changes.

**Current Status:** 🟢 IN SYNC - Last synchronized: 2025-10-03

***

## Version Control and Change History

| Version | Update Date | Updated By | Change Description | Affected Systems | Ticket Reference |
|---------|-------------|------------|-------------------|------------------|------------------|
| 1.5 | 2025-10-01 | [Name] | Added new APAC datacenter ranges | Azure, WAF CloudCell, WAF IPSets | INFRA-12345 |
| 1.4 | 2025-09-15 | [Name] | Removed deprecated EU ranges | All systems | INFRA-12234 |
| 1.3 | 2025-09-01 | [Name] | Initial CENR sync | All systems | INFRA-12100 |

***

## Source Configuration

### ZScaler CENR Endpoint

**Primary Source:** https://config.zscaler.com/zscaler.net/cenr

**API Endpoint:**
```bash
https://config.zscaler.com/api/getdata/zscaler.net/all/cenr?site=config.zscaler.com
```

**Authentication:** No authentication required (public endpoint)

**Data Format:** JSON response containing regional IP ranges, datacenter locations, and readiness status

### Automated Retrieval Script

<details>
<summary>Click to view Python script for retrieving ZScaler IP ranges</summary>

```python
#!/usr/bin/env python3
import requests
import json
from datetime import datetime

def get_zscaler_ip_ranges():
    """
    Retrieves ZScaler CENR IP ranges from official API endpoint
    Filters out future/not-ready datacenters
    """
    response = requests.get(
        'https://config.zscaler.com/api/getdata/zscaler.net/all/cenr?site=config.zscaler.com'
    )
    
    if response.status_code != 200:
        raise Exception(f"Failed to retrieve data: {response.status_code}")
    
    data = response.json()
    regions = data['data']['body']['json']['rows'][1:]
    
    ip_ranges = []
    
    for region in regions:
        region_name = region['region']
        cols = region['cols']
        
        for col in cols:
            data_entries = col['data']
            
            for entry in data_entries:
                if entry.get('multivip'):
                    sub_data = entry['data']
                    
                    for sub_entry in sub_data:
                        # Check if datacenter is ready for use
                        not_ready = any(note['id'] == 3 for note in sub_entry.get('notes', []))
                        
                        if not not_ready:
                            ip_ranges.append({
                                'ip_address': sub_entry['ip_address'],
                                'region': sub_entry['region'],
                                'location': sub_entry['location'],
                                'label': f"Zscaler-{sub_entry['region']}-{sub_entry['location']}"
                            })
    
    return ip_ranges

def export_to_cidr_format(ip_ranges):
    """Converts IP ranges to CIDR notation for Azure/WAF"""
    cidr_ranges = []
    for ip_range in ip_ranges:
        # Add /32 for individual IPs if not already in CIDR format
        ip_addr = ip_range['ip_address']
        if '/' not in ip_addr:
            ip_addr = f"{ip_addr}/32"
        cidr_ranges.append(ip_addr)
    return cidr_ranges

if __name__ == "__main__":
    ranges = get_zscaler_ip_ranges()
    cidr_list = export_to_cidr_format(ranges)
    
    output = {
        'timestamp': datetime.utcnow().isoformat(),
        'total_ranges': len(cidr_list),
        'ip_ranges': cidr_list
    }
    
    with open('zscaler_ranges.json', 'w') as f:
        json.dump(output, f, indent=2)
    
    print(f"Retrieved {len(cidr_list)} IP ranges")
    print(f"Output saved to zscaler_ranges.json")
```

</details>

***

## Current IP Ranges Comparison Matrix

### Synchronization Status Dashboard

| Destination System | Status | Last Updated | IP Count | Sync Health | Action Required |
|-------------------|--------|--------------|----------|-------------|-----------------|
| ZScaler CENR (Source) | 🔵 SOURCE | 2025-10-03 | 147 | N/A | Monitor weekly |
| Azure Named Locations | 🟢 SYNCED | 2025-10-03 | 147 | ✓ | None |
| WAF CloudCell Terraform | 🟡 PENDING | 2025-09-28 | 142 | ⚠️ | Update required |
| WAF IPSets | 🟢 SYNCED | 2025-10-03 | 147 | ✓ | None |

### Active IP Ranges (Sample)

> **ℹ️ Current Production IP Ranges**
>
> Total Active Ranges: 147  
> Last Retrieved: 2025-10-03 16:45 +08

| Region | Location | IP Address/Range | CIDR Notation | Status |
|--------|----------|------------------|---------------|--------|
| Americas | US-East | 165.225.0.0 | 165.225.0.0/16 | 🟢 ACTIVE |
| Americas | US-West | 147.161.128.0 | 147.161.128.0/17 | 🟢 ACTIVE |
| EMEA | EU-Central | 185.46.212.0 | 185.46.212.0/22 | 🟢 ACTIVE |
| APAC | Singapore | 136.226.0.0 | 136.226.0.0/16 | 🟢 ACTIVE |
| APAC | Sydney | 147.161.192.0 | 147.161.192.0/18 | 🟢 ACTIVE |

> **💡 Note:** The complete list of 147 IP ranges is maintained in the attached file: `zscaler_ranges_latest.json`

***

## Destination System Update Procedures

### 1. Azure Named Locations (Conditional Access)

> **Azure Named Locations Configuration**
>
> **Purpose:** Controls conditional access policies based on ZScaler egress IPs
>
> **Resource Type:** Microsoft Graph API - ipNamedLocation
>
> **Maximum Limits:**
> - Maximum 195 named locations per tenant
> - Maximum 2000 IP ranges per named location

#### Prerequisites

- Microsoft Graph API permissions: `Policy.ReadWrite.ConditionalAccess`
- Azure AD Global Administrator or Conditional Access Administrator role
- PowerShell Module: `Microsoft.Graph.Identity.SignIns`

#### Update Procedure via Microsoft Graph API

```powershell
# Install required module
Install-Module Microsoft.Graph.Identity.SignIns -Scope CurrentUser

# Connect with appropriate permissions
Connect-MgGraph -Scopes "Policy.ReadWrite.ConditionalAccess"

# Retrieve existing Named Location ID
$namedLocations = Get-MgIdentityConditionalAccessNamedLocation -All
$zscalerLocation = $namedLocations | Where-Object { $_.DisplayName -eq "ZScaler-CENR-IPs" }

# Load IP ranges from file
$ipRanges = Get-Content -Path "zscaler_ranges.json" | ConvertFrom-Json

# Convert to required format
$ipRangeObjects = @()
foreach ($ip in $ipRanges.ip_ranges) {
    $ipRangeObjects += @{
        "@odata.type" = "#microsoft.graph.iPv4CidrRange"
        cidrAddress = $ip
    }
}

# Update Named Location
$updateParams = @{
    "@odata.type" = "#microsoft.graph.ipNamedLocation"
    displayName = "ZScaler-CENR-IPs"
    isTrusted = $true
    ipRanges = $ipRangeObjects
}

Update-MgIdentityConditionalAccessNamedLocation `
    -NamedLocationId $zscalerLocation.Id `
    -BodyParameter $updateParams

Write-Host "Successfully updated Azure Named Location with $($ipRanges.total_ranges) IP ranges"
```

#### Update Procedure via Azure CLI

```bash
# Login to Azure
az login

# Get Named Location ID
LOCATION_ID=$(az rest --method get \
  --url 'https://graph.microsoft.com/v1.0/identity/conditionalAccess/namedLocations' \
  --query "value[?displayName=='ZScaler-CENR-IPs'].id" -o tsv)

# Update Named Location (payload in JSON file)
az rest --method PATCH \
  --url "https://graph.microsoft.com/v1.0/identity/conditionalAccess/namedLocations/${LOCATION_ID}" \
  --headers 'Content-Type=application/json' \
  --body @azure_namedlocation_payload.json
```

#### Verification Steps

```powershell
# Verify update
$updatedLocation = Get-MgIdentityConditionalAccessNamedLocation -NamedLocationId $zscalerLocation.Id
Write-Host "IP Range Count: $($updatedLocation.IpRanges.Count)"
Write-Host "Is Trusted: $($updatedLocation.IsTrusted)"
```

#### Rollback Procedure

```powershell
# Load backup configuration
$backupConfig = Get-Content -Path "backup/azure_namedlocation_backup_$(Get-Date -Format 'yyyyMMdd').json" | ConvertFrom-Json

# Restore previous configuration
Update-MgIdentityConditionalAccessNamedLocation `
    -NamedLocationId $zscalerLocation.Id `
    -BodyParameter $backupConfig

Write-Host "Rollback completed successfully"
```

***

### 2. WAF CloudCell Terraform Module

> **WAF CloudCell Terraform Configuration**
>
> **Purpose:** Infrastructure as Code for WAF IP allowlists
>
> **Repository:** `git@github.com:organization/waf-cloudcell-terraform.git`
>
> **Module Path:** `modules/waf-cloudcell/variables.tf`

#### Terraform Variable Structure

```hcl
variable "zscaler_ip_ranges" {
  description = "ZScaler CENR IP ranges for WAF allowlist"
  type        = list(string)
  default     = [
    "165.225.0.0/16",
    "147.161.128.0/17",
    "185.46.212.0/22",
    "136.226.0.0/16",
    # Additional ranges...
  ]
  
  validation {
    condition     = alltrue([for ip in var.zscaler_ip_ranges : can(cidrhost(ip, 0))])
    error_message = "All IP ranges must be valid CIDR notation."
  }
}

variable "zscaler_ranges_last_updated" {
  description = "Last update timestamp for ZScaler IP ranges"
  type        = string
  default     = "2025-10-03T08:45:00Z"
}
```

#### Terraform Resource Configuration

```hcl
locals {
  zscaler_ip_map = { for idx, ip in var.zscaler_ip_ranges : 
    "zscaler_range_${idx}" => ip 
  }
}

resource "aws_wafv2_ip_set" "zscaler_cenr" {
  name               = "zscaler-cenr-ipset"
  description        = "ZScaler Cloud Enforcement Node Ranges - Updated: ${var.zscaler_ranges_last_updated}"
  scope              = "REGIONAL"
  ip_address_version = "IPV4"
  
  addresses = var.zscaler_ip_ranges
  
  tags = {
    Name             = "ZScaler-CENR-IPSet"
    Environment      = var.environment
    ManagedBy        = "Terraform"
    LastUpdated      = var.zscaler_ranges_last_updated
    SourceEndpoint   = "https://config.zscaler.com/zscaler.net/cenr"
  }
}

# WAF Rule to allow ZScaler IPs
resource "aws_wafv2_web_acl" "cloudcell_waf" {
  name  = "cloudcell-waf-acl"
  scope = "REGIONAL"
  
  default_action {
    block {}
  }
  
  rule {
    name     = "AllowZScalerCENR"
    priority = 1
    
    action {
      allow {}
    }
    
    statement {
      ip_set_reference_statement {
        arn = aws_wafv2_ip_set.zscaler_cenr.arn
      }
    }
    
    visibility_config {
      cloudwatch_metrics_enabled = true
      metric_name                = "AllowZScalerCENR"
      sampled_requests_enabled   = true
    }
  }
  
  visibility_config {
    cloudwatch_metrics_enabled = true
    metric_name                = "CloudCellWAF"
    sampled_requests_enabled   = true
  }
}
```

#### Update Procedure

```bash
#!/bin/bash

# 1. Clone repository
git clone git@github.com:organization/waf-cloudcell-terraform.git
cd waf-cloudcell-terraform

# 2. Create feature branch
git checkout -b update/zscaler-ip-ranges-$(date +%Y%m%d)

# 3. Update variables file
cat zscaler_ranges.json | jq -r '.ip_ranges[]' | \
  awk 'BEGIN{print "variable \"zscaler_ip_ranges\" {"} 
       BEGIN{print "  type = list(string)"} 
       BEGIN{print "  default = ["} 
       {print "    \""$0"\","}
       END{print "  ]"}
       END{print "}"}' > modules/waf-cloudcell/variables.tf.new

mv modules/waf-cloudcell/variables.tf.new modules/waf-cloudcell/variables.tf

# 4. Update timestamp variable
CURRENT_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
sed -i "s/default = \".*\"/default = \"$CURRENT_TIME\"/" \
  modules/waf-cloudcell/variables.tf

# 5. Terraform validation
cd environments/production
terraform init
terraform validate
terraform plan -out=tfplan

# 6. Review and apply
terraform show tfplan
# After review:
# terraform apply tfplan

# 7. Commit and push
git add modules/waf-cloudcell/variables.tf
git commit -m "Update ZScaler CENR IP ranges - $(date +%Y-%m-%d)"
git push origin update/zscaler-ip-ranges-$(date +%Y%m%d)

# 8. Create pull request
echo "Create PR at: https://github.com/organization/waf-cloudcell-terraform/compare/update/zscaler-ip-ranges-$(date +%Y%m%d)"
```

#### Rollback Procedure

```bash
# Identify previous state version
terraform state list

# Rollback to specific version
terraform state pull > backup.tfstate
terraform apply -auto-approve -backup=backup.tfstate

# Alternative: Revert Git commit
git revert HEAD
git push origin main

# Re-apply previous configuration
terraform init
terraform apply -auto-approve
```

***

### 3. WAF IPSets (Direct Configuration)

> **AWS WAF IPSet Direct Configuration**
>
> **Purpose:** Direct WAF IPSet management for non-Terraform environments
>
> **AWS Service:** AWS WAFv2
>
> **Resource ARN Format:** `arn:aws:wafv2:region:account-id:regional/ipset/name/id`

#### AWS CLI Update Procedure

```bash
#!/bin/bash

# Configuration
IPSET_NAME="zscaler-cenr-ipset"
IPSET_ID="a1b2c3d4-5678-90ab-cdef-EXAMPLE11111"
AWS_REGION="us-east-1"
SCOPE="REGIONAL"

# Get current lock token (required for updates)
LOCK_TOKEN=$(aws wafv2 get-ip-set \
  --scope $SCOPE \
  --id $IPSET_ID \
  --name $IPSET_NAME \
  --region $AWS_REGION \
  --query 'LockToken' \
  --output text)

# Load IP ranges from file
IP_RANGES=$(cat zscaler_ranges.json | jq -r '.ip_ranges | join(" ")')

# Update IPSet
aws wafv2 update-ip-set \
  --scope $SCOPE \
  --id $IPSET_ID \
  --name $IPSET_NAME \
  --addresses $IP_RANGES \
  --lock-token $LOCK_TOKEN \
  --region $AWS_REGION

# Verify update
echo "Verification:"
aws wafv2 get-ip-set \
  --scope $SCOPE \
  --id $IPSET_ID \
  --name $IPSET_NAME \
  --region $AWS_REGION \
  --query '{Name:Name,IPCount:Addresses|length(@),LastUpdated:UpdatedTime}'
```

#### Terraform Alternative (Standalone)

```hcl
# Provider configuration
provider "aws" {
  region = "us-east-1"
}

# Read IP ranges from local file
locals {
  zscaler_ranges = jsondecode(file("${path.module}/zscaler_ranges.json"))
}

# Create IPSet
resource "aws_wafv2_ip_set" "zscaler_standalone" {
  name               = "zscaler-cenr-ipset-standalone"
  description        = "ZScaler CENR IP Ranges - Standalone Configuration"
  scope              = "REGIONAL"
  ip_address_version = "IPV4"
  
  addresses = local.zscaler_ranges.ip_ranges
  
  tags = {
    Name        = "ZScaler-CENR-Standalone"
    Environment = "Production"
    LastSync    = local.zscaler_ranges.timestamp
  }
}

# Output IPSet details
output "ipset_arn" {
  value = aws_wafv2_ip_set.zscaler_standalone.arn
}

output "ipset_id" {
  value = aws_wafv2_ip_set.zscaler_standalone.id
}
```

#### Python Boto3 Update Script

```python
import boto3
import json
from datetime import datetime

def update_waf_ipset(ipset_name, ipset_id, ip_ranges, region='us-east-1'):
    """
    Updates AWS WAFv2 IPSet with new ZScaler IP ranges
    """
    client = boto3.client('wafv2', region_name=region)
    
    # Get current IPSet to retrieve lock token
    response = client.get_ip_set(
        Scope='REGIONAL',
        Name=ipset_name,
        Id=ipset_id
    )
    
    lock_token = response['LockToken']
    
    # Update IPSet
    update_response = client.update_ip_set(
        Scope='REGIONAL',
        Name=ipset_name,
        Id=ipset_id,
        Addresses=ip_ranges,
        LockToken=lock_token
    )
    
    print(f"IPSet updated successfully at {datetime.utcnow().isoformat()}")
    print(f"NextLockToken: {update_response['NextLockToken']}")
    
    return update_response

if __name__ == "__main__":
    # Load IP ranges
    with open('zscaler_ranges.json', 'r') as f:
        data = json.load(f)
    
    # Configuration
    IPSET_NAME = 'zscaler-cenr-ipset'
    IPSET_ID = 'a1b2c3d4-5678-90ab-cdef-EXAMPLE11111'
    
    # Update
    result = update_waf_ipset(
        ipset_name=IPSET_NAME,
        ipset_id=IPSET_ID,
        ip_ranges=data['ip_ranges'],
        region='us-east-1'
    )
```

#### Verification and Validation

```bash
# Verify IPSet configuration
aws wafv2 get-ip-set \
  --scope REGIONAL \
  --id $IPSET_ID \
  --name $IPSET_NAME \
  --region us-east-1

# List all IPSets
aws wafv2 list-ip-sets \
  --scope REGIONAL \
  --region us-east-1

# Check CloudWatch metrics for WAF activity
aws cloudwatch get-metric-statistics \
  --namespace AWS/WAFV2 \
  --metric-name AllowedRequests \
  --dimensions Name=Rule,Value=AllowZScalerCENR \
  --start-time $(date -u -d '1 hour ago' +%Y-%m-%dT%H:%M:%S) \
  --end-time $(date -u +%Y-%m-%dT%H:%M:%S) \
  --period 300 \
  --statistics Sum \
  --region us-east-1
```

***

## Automated Alerting and Notification Strategy

> **Monitoring and Alerting Framework**
>
> **Objective:** Detect ZScaler IP range changes and trigger automated notifications

### Detection Methods

#### 1. Scheduled Webhook Monitoring

```python
import requests
import hashlib
import json
from datetime import datetime

def monitor_zscaler_changes(webhook_url):
    """
    Monitors ZScaler CENR endpoint for changes
    Sends Slack/Teams notification on detected changes
    """
    current_data = requests.get(
        'https://config.zscaler.com/api/getdata/zscaler.net/all/cenr?site=config.zscaler.com'
    ).json()
    
    # Generate hash of current data
    current_hash = hashlib.sha256(
        json.dumps(current_data, sort_keys=True).encode()
    ).hexdigest()
    
    # Compare with stored hash
    try:
        with open('zscaler_hash.txt', 'r') as f:
            stored_hash = f.read().strip()
    except FileNotFoundError:
        stored_hash = None
    
    if stored_hash != current_hash:
        # Change detected - send notification
        message = {
            "text": f"⚠️ ZScaler IP Range Change Detected",
            "attachments": [{
                "color": "warning",
                "fields": [
                    {"title": "Detection Time", "value": datetime.utcnow().isoformat(), "short": True},
                    {"title": "Action Required", "value": "Update all destination systems", "short": True}
                ],
                "footer": "ZScaler CENR Monitor"
            }]
        }
        
        requests.post(webhook_url, json=message)
        
        # Update stored hash
        with open('zscaler_hash.txt', 'w') as f:
            f.write(current_hash)
        
        return True
    
    return False
```

#### 2. AWS EventBridge Scheduled Rule

```hcl
resource "aws_cloudwatch_event_rule" "zscaler_check" {
  name                = "zscaler-ip-range-check"
  description         = "Checks ZScaler IP ranges daily"
  schedule_expression = "cron(0 8 * * ? *)"  # Daily at 8 AM UTC
}

resource "aws_cloudwatch_event_target" "lambda" {
  rule      = aws_cloudwatch_event_rule.zscaler_check.name
  target_id = "ZScalerMonitorLambda"
  arn       = aws_lambda_function.zscaler_monitor.arn
}

resource "aws_sns_topic" "zscaler_alerts" {
  name = "zscaler-ip-range-changes"
}

resource "aws_sns_topic_subscription" "email" {
  topic_arn = aws_sns_topic.zscaler_alerts.arn
  protocol  = "email"
  endpoint  = "network-team@company.com"
}
```

### Notification Channels

| Channel | Purpose | Configuration | Audience |
|---------|---------|---------------|----------|
| Slack | Immediate notifications | Webhook: `https://hooks.slack.com/services/...` | Network & Security Teams |
| Microsoft Teams | Change alerts | Webhook: `https://company.webhook.office.com/...` | Infrastructure Team |
| Email | Daily digest | SNS Topic: `arn:aws:sns:us-east-1:123456789012:zscaler-alerts` | Management |
| PagerDuty | Critical failures | Integration Key: `<INTEGRATION_KEY>` | On-call engineers |
| JIRA | Automatic ticket creation | Project: `INFRA`, Issue Type: `Task` | All stakeholders |

### Escalation Matrix

```
Level 1 (0-2 hours):   Network Operations Team
Level 2 (2-4 hours):   Network Architecture Team
Level 3 (4-8 hours):   Infrastructure Management
Level 4 (8+ hours):    Director of Infrastructure
```

***

## Documentation and API References

### Official Documentation Links

- [ZScaler CENR Configuration](https://config.zscaler.com/zscaler.net/cenr)
- [Microsoft Graph - Named Locations API](https://learn.microsoft.com/en-us/graph/api/ipnamedlocation-update)
- [AWS WAFv2 IPSet Resource](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/wafv2_ip_set)
- [Azure Conditional Access Named Locations](https://learn.microsoft.com/en-us/azure/active-directory/conditional-access/location-condition)
- [Terraform AWS WAF Provider Documentation](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)

### Internal Documentation

- WAF CloudCell Architecture Overview
- Azure Conditional Access Policy Standards
- Network Security Baseline Configuration
- Incident Response Runbook - WAF

### API Endpoints Summary

| Service | Endpoint | Method | Authentication |
|---------|----------|--------|----------------|
| ZScaler CENR | `https://config.zscaler.com/api/getdata/zscaler.net/all/cenr` | GET | None (Public) |
| Microsoft Graph | `https://graph.microsoft.com/v1.0/identity/conditionalAccess/namedLocations` | GET/PATCH | OAuth 2.0 |
| AWS WAFv2 | `wafv2.{region}.amazonaws.com` | API | AWS SigV4 |

***

## Health Checks and Validation

### Post-Update Validation Checklist

- [ ] **Azure Named Locations**
  - [ ] IP count matches source
  - [ ] Location marked as "Trusted"
  - [ ] Conditional Access policies functioning
  - [ ] No authentication failures reported

- [ ] **WAF CloudCell Terraform**
  - [ ] Terraform plan shows expected changes
  - [ ] Module validation passed
  - [ ] No resource drift detected
  - [ ] CloudWatch metrics show normal traffic

- [ ] **WAF IPSets**
  - [ ] IPSet updated successfully
  - [ ] Lock token retrieved
  - [ ] CloudWatch logs show allowed requests
  - [ ] No legitimate traffic blocked

- [ ] **Documentation**
  - [ ] Confluence page updated
  - [ ] Change log entry added
  - [ ] Version incremented
  - [ ] Team notified

### Automated Health Check Script

```bash
#!/bin/bash

echo "=== ZScaler IP Range Synchronization Health Check ==="
echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
echo ""

# 1. Check ZScaler source
echo "[1/4] Checking ZScaler CENR endpoint..."
CENR_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
  'https://config.zscaler.com/api/getdata/zscaler.net/all/cenr?site=config.zscaler.com')

if [ "$CENR_STATUS" -eq 200 ]; then
  echo "✓ ZScaler CENR: OK"
else
  echo "✗ ZScaler CENR: FAILED (HTTP $CENR_STATUS)"
fi

# 2. Check Azure Named Locations
echo "[2/4] Checking Azure Named Locations..."
AZURE_COUNT=$(az rest --method get \
  --url 'https://graph.microsoft.com/v1.0/identity/conditionalAccess/namedLocations' \
  --query "value[?displayName=='ZScaler-CENR-IPs'].ipRanges | [0] | length(@)" -o tsv)

echo "✓ Azure Named Location IP Count: $AZURE_COUNT"

# 3. Check WAF IPSet
echo "[3/4] Checking AWS WAF IPSet..."
WAF_COUNT=$(aws wafv2 get-ip-set \
  --scope REGIONAL \
  --id $IPSET_ID \
  --name $IPSET_NAME \
  --region us-east-1 \
  --query 'IPSet.Addresses | length(@)' \
  --output text)

echo "✓ WAF IPSet IP Count: $WAF_COUNT"

# 4. Compare counts
echo "[4/4] Synchronization status..."
if [ "$AZURE_COUNT" -eq "$WAF_COUNT" ]; then
  echo "✓ All systems synchronized ($AZURE_COUNT ranges)"
else
  echo "⚠ SYNC MISMATCH - Azure: $AZURE_COUNT, WAF: $WAF_COUNT"
fi

echo ""
echo "=== Health Check Complete ==="
```

***

## Troubleshooting and Common Issues

<details>
<summary>Click to view troubleshooting guide</summary>

### Issue 1: Azure Named Location Update Fails

**Symptoms:** PowerShell command returns 403 Forbidden or 401 Unauthorized

**Resolution:**
```powershell
# Verify permissions
Get-MgContext | Select-Object -ExpandProperty Scopes

# Should include: Policy.ReadWrite.ConditionalAccess
# If missing, reconnect with correct scope:
Connect-MgGraph -Scopes "Policy.ReadWrite.ConditionalAccess"
```

### Issue 2: WAF IPSet Exceeds Capacity Limits

**Symptoms:** AWS API returns LimitExceededException

**Limits:**
- Maximum 10,000 IP addresses per IPSet
- IPv4 CIDR ranges count as: (2^(32-prefix)) addresses

**Resolution:**
- Consolidate IP ranges using CIDR aggregation
- Split into multiple IPSets if necessary
- Use WAFv2 IP Set Groups for logical grouping

### Issue 3: Terraform State Lock

**Symptoms:** "Error locking state" during terraform apply

**Resolution:**
```bash
# Force unlock (use with caution)
terraform force-unlock <LOCK_ID>

# Or use DynamoDB lock table
aws dynamodb delete-item \
  --table-name terraform-state-lock \
  --key '{"LockID": {"S": "terraform-state-lock-id"}}'
```

### Issue 4: ZScaler API Returns Stale Data

**Symptoms:** Retrieved IP ranges don't match published documentation

**Resolution:**
- Clear DNS cache
- Add cache-busting parameter to API call
- Verify using alternate endpoint: `https://config.zscalerthree.net/cenr`

</details>

***

## Contact Information and Ownership

| Role | Name | Email | Slack Handle | Responsibility |
|------|------|-------|--------------|----------------|
| Page Owner | [Network Architect Name] | network.architect@company.com | @netarch | Overall coordination |
| Azure Administrator | [Azure Admin Name] | azure.admin@company.com | @azureadmin | Azure Named Locations |
| Terraform Maintainer | [DevOps Name] | devops@company.com | @devops | WAF Terraform modules |
| Security Engineer | [Security Name] | security@company.com | @seceng | WAF IPSets & policies |
| Backup Contact | [Manager Name] | manager@company.com | @manager | Escalation point |

### Support Channels

- **Slack:** `#network-security`
- **Email DL:** `network-operations@company.com`
- **JIRA Project:** [INFRA](https://jira.company.com/projects/INFRA)
- **Confluence Space:** [Network Infrastructure](https://confluence.company.com/display/NETINFRA)

***

## Attachments and Resources

- `zscaler_ranges_latest.json` - Current IP ranges (JSON format)
- `zscaler_ranges_latest.csv` - Current IP ranges (CSV format)
- `azure_namedlocation_backup_20251003.json` - Azure backup
- `terraform_ipset_config_20251003.tf` - Terraform config backup
- `update_procedures_flowchart.pdf` - Visual workflow diagram

***

## Page Maintenance Information

> **ℹ️ Page Maintenance**
>
> **Last Updated:** 2025-10-03 16:45 +08  
> **Next Review Date:** 2025-10-10  
> **Document Version:** 1.5  
> **Change Frequency:** Weekly monitoring, updates as needed

> **⚠️ CRITICAL REMINDER:** Always create backups before making changes to production systems. Test updates in non-production environments first when possible.

***

### Quick Action Links

- [Check ZScaler CENR Now](https://config.zscaler.com/zscaler.net/cenr)
- [Azure Conditional Access Portal](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ConditionalAccessBlade/NamedLocations)
- [AWS WAF Console](https://console.aws.amazon.com/wafv2/)
- [Terraform Cloud Workspace](https://app.terraform.io/app/organization/workspaces/waf-cloudcell)
- [Create JIRA Ticket](https://jira.company.com/secure/CreateIssue.jspa?pid=12345&issuetype=10001)

***

This Markdown version maintains all the functionality of the original Confluence page while using standard Markdown syntax with HTML elements for advanced features like collapsible sections.
---